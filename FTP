SERVER
#include <stdio.h> 
#include <string.h> 
#include <sys/socket.h> 
#include <sys/types.h> 
#include <netinet/in.h> 
#include <arpa/inet.h> 
#include <fcntl.h> 
#include <stdlib.h> 
#include <unistd.h> 
#define BUFFER_SIZE 1024 
void handle_get(int sock_data, char *filename) { 
    int fd; 
    char buffer[BUFFER_SIZE]; 
    ssize_t n; 
    if ((fd = open(filename, O_RDONLY)) < 0) { 
        strcpy(buffer, "Error: File not found on server.\n"); 
        write(sock_data, buffer, strlen(buffer)); 
        return; 
    } 
    while ((n = read(fd, buffer, sizeof(buffer))) > 0) { 
        write(sock_data, buffer, n); 
    } 
    close(fd); 
} 
void handle_put(int sock_data, char *filename) { 
    int fd; 
    char buffer[BUFFER_SIZE]; 
    ssize_t n; 
    if ((fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644)) < 0) { 
        strcpy(buffer, "Error: Unable to create or write to file.\n"); 
        write(sock_data, buffer, strlen(buffer)); 
        return; 
    } 
    while ((n = read(sock_data, buffer, sizeof(buffer))) > 0) { 
        write(fd, buffer, n); } 
    close(fd); 
    strcpy(buffer, "File uploaded successfully.\n"); 
    write(sock_data, buffer, strlen(buffer)); 
} 
void handle_bye(int sock_ctrl) { 
    char *msg = "Goodbye! Closing connection.\n"; 
    write(sock_ctrl, msg, strlen(msg)); 
    close(sock_ctrl); 
} 
int main(int argc, char *argv[]) { 
    int sock_ctrl, sock_data, listen_control, listen_data; 
    int cli_len, n; 
    struct sockaddr_in servaddr, cliaddr, data_addr; 
    char buffer[BUFFER_SIZE], cmd[100], filename[100]; 
    cli_len = sizeof(cliaddr); 
    if (argc != 2) { 
        fprintf(stderr, "Usage: ./server <port>\n"); 
        exit(1); 
    } 
    if ((listen_control = socket(AF_INET, SOCK_STREAM, 0)) < 0) { 
        perror("Cannot create control socket"); 
        exit(1); 
    } 
    bzero(&servaddr, sizeof(servaddr)); 
    servaddr.sin_family = AF_INET; 
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);   
    servaddr.sin_port = htons(atoi(argv[1])); 
    if (bind(listen_control, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) { 
        perror("Server bind failed for control socket"); 
        exit(1); 
    } 
    listen(listen_control, 5); 
    if ((listen_data = socket(AF_INET, SOCK_STREAM, 0)) < 0) { 
        perror("Cannot create data socket"); 
        exit(1); 
    } 
    bzero(&data_addr, sizeof(data_addr)); 
    data_addr.sin_family = AF_INET; 
    data_addr.sin_addr.s_addr = htonl(INADDR_ANY);   
    data_addr.sin_port = htons(atoi(argv[1]) + 1); 
    if (bind(listen_data, (struct sockaddr *)&data_addr, sizeof(data_addr)) < 0) { 
        perror("Server bind failed for data socket"); 
        exit(1); 
    } 
    listen(listen_data, 5); 
    while (1) { 
        if ((sock_ctrl = accept(listen_control, (struct sockaddr *)&cliaddr, &cli_len)) < 0) { 
            perror("Accept failed"); 
            exit(1); 
        } 
        while (1) { 
            bzero(cmd, sizeof(cmd)); 
            n = read(sock_ctrl, cmd, sizeof(cmd) - 1); 
            if (n <= 0) { 
                break; 
            } 
            cmd[n] = '\0'; 
            if (strcmp(cmd, "get") == 0) { 
                read(sock_ctrl, filename, sizeof(filename)); 
                if ((sock_data = accept(listen_data, (struct sockaddr *)&cliaddr, &cli_len)) < 0) { 
                    perror("Accept failed for data connection"); 
                    break;} 
                handle_get(sock_data, filename); 
                close(sock_data); 
            } else if (strcmp(cmd, "put") == 0) { 
                read(sock_ctrl, filename, sizeof(filename)); 
                if ((sock_data = accept(listen_data, (struct sockaddr *)&cliaddr, &cli_len)) < 0) { 
                    perror("Accept failed for data connection"); 
                    break;} 
                handle_put(sock_data, filename); 
                close(sock_data); 
            } else if (strcmp(cmd, "bye") == 0) { 
                handle_bye(sock_ctrl); 
                break; 
            } else { 
                strcpy(buffer, "Error: Invalid command.\n"); 
                write(sock_ctrl, buffer, strlen(buffer)); 
            }} 
        close(sock_ctrl); 
    } 
return 0; 
}


CLIENT
#include <stdio.h> 
#include <string.h> 
#include <sys/socket.h> 
#include <sys/types.h> 
#include <netinet/in.h> 
#include <arpa/inet.h> 
#include <fcntl.h> 
#include <stdlib.h> 
#include <unistd.h> 
#define BUFFER_SIZE 1024 
int main(int argc, char *argv[]) { 
    int sock_ctrl, sock_data, fd; 
    struct sockaddr_in servaddr; 
    char buffer[BUFFER_SIZE], cmd[100], filename[100]; 
    ssize_t n; 
    if (argc != 2) { 
        fprintf(stderr, "Usage: ./client <port>\n"); 
        exit(1); 
    } 
    if ((sock_ctrl = socket(AF_INET, SOCK_STREAM, 0)) < 0) { 
        perror("Cannot create control socket"); 
        exit(1); 
    } 
    bzero(&servaddr, sizeof(servaddr)); 
    servaddr.sin_family = AF_INET; 
    servaddr.sin_port = htons(atoi(argv[1])); 
    servaddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK); // Use localhost (127.0.0.1) 
    if (connect(sock_ctrl, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) { 
        perror("Connection failed"); 
        exit(1); 
    } 
    printf("Enter 'get <filename>' to download a file.\n"); 
    printf("Enter 'put <filename>' to upload a file.\n"); 
    printf("Enter 'bye' to close the connection.\n"); 
    while (1) { 
        printf("Enter command: "); 
        scanf("%s", cmd); 
        if (strcmp(cmd, "bye") == 0) { 
            write(sock_ctrl, cmd, strlen(cmd)); 
            break; 
        } 
        printf("Enter filename: "); 
        scanf("%s", filename); 
        write(sock_ctrl, cmd, strlen(cmd)); 
        write(sock_ctrl, filename, strlen(filename)); 
        if (strcmp(cmd, "get") == 0) { 
            if ((sock_data = socket(AF_INET, SOCK_STREAM, 0)) < 0) { 
                perror("Error creating data socket"); 
                exit(1); 
            } 
            servaddr.sin_port = htons(atoi(argv[1]) + 1); 
            if (connect(sock_data, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) { 
                perror("Error connecting to data socket"); 
                exit(1); 
            } 
            fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644); 
            if (fd < 0) { 
                perror("Error opening file"); 
                exit(1); 
            } 
            while ((n = read(sock_data, buffer, sizeof(buffer))) > 0) { 
                write(fd, buffer, n); 
            } 
            close(fd); 
            close(sock_data); 
            printf("File %s received from server.\n", filename); 
        } else if (strcmp(cmd, "put") == 0) { 
            if ((sock_data = socket(AF_INET, SOCK_STREAM, 0)) < 0) { 
                perror("Error creating data socket"); 
                exit(1); 
            } 
            servaddr.sin_port = htons(atoi(argv[1]) + 1); 
            if (connect(sock_data, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) { 
                perror("Error connecting to data socket"); 
                exit(1); 
            } 
            fd = open(filename, O_RDONLY); 
            if (fd < 0) { 
                perror("Error opening file"); 
                exit(1); 
            } 
            while ((n = read(fd, buffer, sizeof(buffer))) > 0) { 
                write(sock_data, buffer, n); 
            } 
            close(fd); 
            close(sock_data); 
            printf("File %s uploaded to server.\n", filename); 
        } 
    } 
    close(sock_ctrl); 
    return 0; 
}
