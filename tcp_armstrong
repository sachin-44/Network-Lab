server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <math.h>

#define PORT 8080
#define MAXLINE 1024

// Function to check if a number is an Armstrong number
int isArmstrong(int num) {
    int original = num, sum = 0, digits = 0;

    // Count the number of digits
    int temp = num;
    while (temp != 0) {
        temp /= 10;
        digits++;
    }

    // Calculate the sum of powers
    temp = num;
    while (temp != 0) {
        int digit = temp % 10;
        sum += pow(digit, digits);
        temp /= 10;
    }

    return sum == original;
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    socklen_t addr_len = sizeof(address);
    int num;
    char response[MAXLINE];

    // Create socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&address, 0, sizeof(address));
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 5) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d...\n", PORT);

    // Accept client connection
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, &addr_len)) < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }
    printf("Client connected.\n");

    // Receive number from client
    read(new_socket, &num, sizeof(num));
    num = ntohl(num); // Convert from network byte order to host byte order
    printf("Received number from client: %d\n", num);

    // Check if number is an Armstrong number
    if (isArmstrong(num)) {
        strcpy(response, "It is an Armstrong number");
    } else {
        strcpy(response, "It is NOT an Armstrong number");
    }

    // Send response back to client
    send(new_socket, response, strlen(response), 0);
    printf("Result sent to client.\n");

    // Close sockets
    close(new_socket);
    close(server_fd);
    return 0;
}

client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080
#define MAXLINE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    int num;
    char buffer[MAXLINE];

    // Create socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    // Connect to the server
    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }
    printf("Connected to server.\n");

    // Get number from user
    printf("Enter a number to check for Armstrong: ");
    scanf("%d", &num);

    // Send number to server (convert to network byte order)
    num = htonl(num);
    send(sockfd, &num, sizeof(num), 0);
    printf("Sent to server.\n");

    // Receive result from server
    read(sockfd, buffer, MAXLINE);
    printf("Result from server: %s\n", buffer);

    // Close the socket
    close(sockfd);
    return 0;
}

