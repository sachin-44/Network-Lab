SERVER
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080
#define MAXLINE 1024

// Function to reverse a string
void reverseString(char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
}

int main() {
    int sockfd;
    char buffer[MAXLINE];
    struct sockaddr_in server_addr, client_addr;
    socklen_t len;

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;          // IPv4
    server_addr.sin_addr.s_addr = INADDR_ANY;  // Listen on any IP
    server_addr.sin_port = htons(PORT);        // Set port

    // Bind socket to the address
    if (bind(sockfd, (const struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    printf("UDP Server is listening on port %d...\n", PORT);

    len = sizeof(client_addr);

    // Receive string from client
    ssize_t bytes_received = recvfrom(sockfd, buffer, MAXLINE, 0, (struct sockaddr *)&client_addr, &len);
    buffer[bytes_received] = '\0';  // Null-terminate the string
    printf("Received from client: %s\n", buffer);

    // Reverse the string
    reverseString(buffer);
    printf("Reversed string: %s\n", buffer);

    // Send reversed string back to client
    sendto(sockfd, buffer, strlen(buffer), 0, (const struct sockaddr *)&client_addr, len);
    printf("Reversed string sent back to client.\n");

    // Close socket
    close(sockfd);
    return 0;
}





CLIENT
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 8080
#define MAXLINE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[MAXLINE];
    socklen_t addr_len = sizeof(server_addr);

    // Create UDP socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;                  // IPv4
    server_addr.sin_port = htons(PORT);                // Port number
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1"); // Server IP (localhost)

    printf("Enter a string to reverse: ");
    fgets(buffer, MAXLINE, stdin);
    buffer[strcspn(buffer, "\n")] = '\0'; // Remove newline character

    // Send string to server
    sendto(sockfd, buffer, strlen(buffer), 0, (const struct sockaddr *)&server_addr, addr_len);
    printf("Sent to server: %s\n", buffer);

    // Receive reversed string from server
    ssize_t bytes_received = recvfrom(sockfd, buffer, MAXLINE, 0, (struct sockaddr *)&server_addr, &addr_len);
    buffer[bytes_received] = '\0';
    printf("Reversed from server: %s\n", buffer);

    // Close the socket
    close(sockfd);
    return 0;
}
